
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse, HttpResponse
import json
from .models import Client, ServicePlan
from .forms import ClientForm

def client_list(request):
    clients = Client.objects.all().order_by('-created_at')
    return render(request, 'clients/client_list.html', {'clients': clients})

def client_create(request):
    if request.method == 'POST':
        form = ClientForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('client_list')
    else:
        form = ClientForm()
    
    # Get all service plans for the dropdown
    service_plans = ServicePlan.objects.all()
    return render(request, 'clients/client_form.html', {
        'form': form,
        'service_plans': service_plans
    })

def save_client_location(request, client_id):
    if request.method == 'POST':
        try:
            client = Client.objects.get(id=client_id)
            data = json.loads(request.body)
            client.latitude = data.get('latitude')
            client.longitude = data.get('longitude')
            client.save()
            return JsonResponse({'status': 'success'})
        except Client.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'Client not found'})
    return JsonResponse({'status': 'error', 'message': 'Invalid request'})

def client_location_pin(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    return render(request, 'clients/location_pin.html', {'client': client})

def client_dashboard(request):
    # Get real data from your database instead of example data
    total_clients = Client.objects.count()
    active_clients = Client.objects.filter(status='active').count()
    
    # Calculate actual revenue (you'll need to adjust this based on your models)
    # This is a placeholder - update with your actual revenue calculation
    revenue = 12500.00  # Replace with actual calculation
    
    context = {
        'title': 'Client Dashboard',
        'total_clients': total_clients,
        'active_clients': active_clients,
        'revenue': revenue,
    }
    return render(request, 'clients/dashboard.html', context)

# Temporarily disabled export functions until resources are properly set up
'''
def export_clients_excel(request):
    client_resource = ClientResource()
    dataset = client_resource.export()
    response = HttpResponse(dataset.xlsx, content_type='application/vnd.ms-excel')
    response['Content-Disposition'] = 'attachment; filename=\"clients_backup.xlsx\"'
    return response

def export_payments_excel(request):
    payment_resource = PaymentResource()
    dataset = payment_resource.export()
    response = HttpResponse(dataset.xlsx, content_type='application/vnd.ms-excel')
    response['Content-Disposition'] = 'attachment; filename=\"payments_backup.xlsx\"'
    return response
'''
def network_dashboard(request):
    """Network monitoring dashboard"""
    return render(request, "network/dashboard.html")

def network_traffic_api(request):
    """API endpoint for network traffic data"""
    from django.http import JsonResponse
    import random
    from django.utils import timezone
    
    data = [{
        "Timestamp": timezone.now().strftime("%H:%M:%S"),
        "Download": round(random.uniform(50, 200), 1),
        "Upload": round(random.uniform(20, 80), 1),
        "TotalUsage": round(random.uniform(70, 280), 1),
        "ActiveSessions": random.randint(100, 400)
    }]
    
    return JsonResponse({
        "success": True,
        "data": data,
        "timestamp": timezone.now().isoformat()
    })

# NETWORK MONITOR FUNCTIONS
def network_dashboard(request):
    """Network monitoring dashboard"""
    return render(request, "network/dashboard.html")

def network_live_dashboard(request):
    """Live network dashboard"""
    return render(request, "network/dashboard.html")

def network_traffic_api(request):
    """API endpoint for network traffic data"""
    import random
    from django.utils import timezone
    
    data = [{
        "Timestamp": timezone.now().strftime("%H:%M:%S"),
        "Download": round(random.uniform(50, 200), 1),
        "Upload": round(random.uniform(20, 80), 1),
        "TotalUsage": round(random.uniform(70, 280), 1),
        "ActiveSessions": random.randint(100, 400)
    }]
    
    return JsonResponse({
        "success": True,
        "data": data,
        "timestamp": timezone.now().isoformat()
    })

def network_alerts_api(request):
    """API endpoint for network alerts"""
    import random
    from django.utils import timezone
    
    alerts = []
    if random.random() > 0.7:
        alerts.append({
            "Severity": "LOW",
            "Message": "High latency detected on router 2",
            "Timestamp": timezone.now().strftime("%H:%M:%S")
        })
    
    return JsonResponse({
        "success": True,
        "alerts": alerts
    })

def network_health_check(request):
    """API endpoint for network health"""
    import random
    from django.utils import timezone
    
    health_data = {
        "status": "online",
        "uptime": "99.8%",
        "current_usage": round(random.uniform(50, 200), 1),
        "active_sessions": random.randint(100, 400),
        "download_speed": round(random.uniform(80, 150), 1),
        "upload_speed": round(random.uniform(30, 70), 1),
        "latency": random.randint(8, 25),
        "health_score": random.randint(85, 100)
    }
    
    return JsonResponse({
        "success": True,
        "health": health_data
    })

def network_usage_breakdown(request):
    """API endpoint for usage breakdown"""
    import random
    
    usage_data = {
        "streaming": random.randint(20, 45),
        "web_browsing": random.randint(15, 30),
        "gaming": random.randint(5, 15),
        "downloads": random.randint(10, 25),
        "voip": random.randint(3, 8)
    }
    
    return JsonResponse({
        "success": True,
        "usage_breakdown": usage_data
    })

def network_peak_hours(request):
    """API endpoint for peak hours"""
    import random
    
    peak_data = {
        "morning": random.randint(40, 65),
        "afternoon": random.randint(50, 75),
        "evening": random.randint(70, 95),
        "night": random.randint(20, 40)
    }
    
    return JsonResponse({
        "success": True,
        "peak_hours": peak_data
    })

def combined_dashboard(request):
    """Combined billing and network dashboard"""
    return render(request, "dashboard/combined.html")

# WHATSAPP FUNCTIONS (if missing)
def whatsapp_bulk_send(request):
    """WhatsApp bulk send function"""
    from django.shortcuts import render, redirect
    from django.contrib import messages
    
    if request.method == 'POST':
        # Simple implementation
        messages.success(request, "WhatsApp messages sent successfully!")
        return redirect('whatsapp_results')
    
    return render(request, 'whatsapp/compose.html')

def whatsapp_results(request):
    """WhatsApp results function"""
    return render(request, 'whatsapp/results.html')

def whatsapp_payment_reminders(request):
    """WhatsApp payment reminders function"""
    from django.shortcuts import render, redirect
    from django.contrib import messages
    
    if request.method == 'POST':
        messages.success(request, "Payment reminders sent successfully!")
        return redirect('whatsapp_results')
    
    return render(request, 'whatsapp/reminders.html')

def main_dashboard(request):
    """Main navigation dashboard"""
    return render(request, 'dashboard/main.html')

def network_main(request):
    """Network monitor main page"""
    return render(request, 'network/dashboard.html')



def auto_login(request):
    """Auto login for clients"""
    # Your auto login logic here
    return redirect('client_dashboard')


